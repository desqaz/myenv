#! /usr/bin/env python

import sys
import signal
import subprocess
import re

ansiColors = {
	"black"   : "\x1b[0;1;30m"
,	"red"     : "\x1b[0;1;31m"
,	"green"   : "\x1b[0;1;32m"
,	"yellow"  : "\x1b[0;1;33m"
,	"blue"    : "\x1b[0;1;34m"
,	"magenta" : "\x1b[0;1;35m"
,	"cyan"    : "\x1b[0;1;36m"
,	"white"   : "\x1b[0;1;37m"
,	"reset"   : "\x1b[0m"
}


matchList = [
	#
	# gcc
	#
	{
			"name"   : "gcc warning"
		,	"match"  : "^\*\*\*\s+([^:]+):([0-9]+):\s*([wW]arning).*$"
		,	"colors" : [ ansiColors['magenta'], ansiColors['cyan'], ansiColors['yellow'] ]
	}
	,{
			"name"   : "gcc error"
		,	"match"  : "^\*\*\*\s+([^:]+):([0-9]+):\s*([eE]rror).*$"
		,	"colors" : [ ansiColors['magenta'], ansiColors['cyan'], ansiColors['red'] ]
	}
	,{
			"name"   : "gcc fatal error"
		,	"match"  : "^\*\*\*\s+([^:]+):([0-9]+):\s*(fatal\s*error).*$"
		,	"colors" : [ ansiColors['magenta'], ansiColors['cyan'], ansiColors['red'] ]
	}
	,{
			"name"   : "gcc note"
		,	"match"  : "^\*\*\*\s+([^:]+):([0-9]+):\s*([nN]ote).*$"
		,	"colors" : [ ansiColors['magenta'], ansiColors['cyan'], ansiColors['white'] ]
	}
	#
	# lmake
	#
	,{
			"name"   : "summary"
		,	"match"  : "^\*\*\*\s+(SUMMARY).*$"
		,	"colors" : [ ansiColors['cyan'] ]
	}
	,{
			"name"   : "summary error"
		,	"match"  : "^\*\*\*\s+(error)\s+(\w+)\s+\|(.*)$"
		,	"colors" : [ ansiColors['red'], ansiColors['yellow'], ansiColors['magenta'] ]
	}
]

def colorLine(line):
	outputLine = line
	for matchElt in matchList:
		try:
			m = re.match(matchElt["match"], line)
			if m:
				beginIdx = 0
				outputLine = ""
				for g in range(1, len(m.groups()) + 1):
					outputLine +=                   \
							line[beginIdx:m.start(g)] \
						+  matchElt["colors"][g - 1] \
						+  line[m.start(g):m.end(g)] \
						+  ansiColors["reset"]
					beginIdx = m.end(g)
				outputLine += line[beginIdx:]
				break
		except:
			sys.stdout.write("-------------- Error in lm script --------------\n")
			sys.stdout.write(" Rule '%s' is broken\n" % matchElt["name"])
			sys.stdout.write(" Line : %s" % line)
			sys.stdout.write("------------------------------------------------\n")
			outputLine = line
	
	sys.stdout.write(outputLine)
		

def sigInthandler(signal, frame):
	sys.stdout.flush()
	sys.stderr.write("--< Interrupted >--\n")
	sys.exit(1)

signal.signal(signal.SIGINT, sigInthandler)

p = subprocess.Popen(["lmake"] + sys.argv[1:], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
while True:
	line = p.stdout.readline()
	if not line:
		break
	colorLine(line)

