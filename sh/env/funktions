#------------------------------------------------------------------------------
# Shell
#------------------------------------------------------------------------------

shell-name ()
{
   \ps -o cmd --pid=$$ | tail -1
   return $?
}

finx()
{
   if [ "$1" = "-h" ] || [ -z "$2" ] || [ -z "$3" ] ; then
      echo "usage: finx <pattern> <path> <filename>"
      return 0
   fi

   find $2 -name $3 | xargs grep $1 -r -n --color=auto --exclude-dir=$MYENV_EXCLUDEDIR_PATTERN
}

finc()
{
   here=$2
   [ -z "$here" ] && here="."
   finx $1 $here '*.c'
}

finh()
{
   here=$2
   [ -z "$here" ] && here="."
   finx $1 $here '*.h'
}

srm () {
	chmod  777 -R $@
	rm -r $@
}

#------------------------------------------------------------------------------
rmsf() {
	chmod -R 777 "$@"
	rm -rf "$@"
}

gpf() {
	grep -r "$@" | awk -F ':' '{print $1}' | sort -u 
}

fn() {
	find . \( -name "products" -o -name "imports" -o -name "\.svn" -o -name "\.git" -o -name "%*" \) -prune -o -name "$*" -print
}

fni() {
	find . \( -name "products" -o -name "imports" -o -name "\.svn" -o -name "\.git" -o -name "%*" \) -prune -o -iname "$*" -print
}

printvar()
{
  typeset strVarName
  typeset strVarVal
  for arg ; do
    strVarName=$arg
    eval strVarVal="\$$strVarName"
    echo "$strVarName=$strVarVal"
  done
  return 0
}

#------------------------------------------------------------------------------
timeout()
{ 
   perl -e 'alarm shift; exec @ARGV' "$@";
}


#------------------------------------------------------------------------------
#Highlight anything with a pipe 
#------------------------------------------------------------------------------

hl ()
{
   sed "s/$1/\o033[1;31m&\o033[m/g"
}


#------------------------------------------------------------------------------
#JIRA 
#------------------------------------------------------------------------------
export JIRASRV=172.16.0.122

jr () {
	JIRACMD="jira-cli"
	#set -x
	while [ $# -gt 0 ] ; do
		case $1 in
   	 	list)
				if [ -z $2 ]; then
					$JIRACMD list components --project=SIG
				else
					$JIRACMD list transitions --issue=SIG-$2
				fi
	   		;;
			view)
				shift
				if [ -n "$(echo $1 | grep '^[0-9]*$')" ]; then
					$JIRACMD view $(echo $@ | sed "s@\([0-9]*[[:space:]]*\)@SIG-\1@g")
				else
					[ -z $1 ] && return 0
					$JIRACMD view --search=$@
				fi
				;;
			jql)
				shift
				$JIRACMD view --search-jql $@
				;;

			help)
				echo "$JIRACMD new --type Bug "Test Bug" --priority=Major --project TP --description='the description''"
				echo "$JIRACMD view TP-25 [TP-X]"
				echo "$JIRACMD view --search='some random words'"
				echo "$JIRACMD view --search-jql 'reporter=ali and type=bug'"
				echo "$JIRACMD view TP-20 --comments-only"
				echo "$JIRACMD list <projects|filters|issue_types|subtask_types|priorities|statuses|resolutions"
				echo "$JIRACMD list components --project=MYPROJ"
				echo "$JIRACMD list transitions --issue=TP-20"
				echo "+++"
				$JIRACMD --help
				;;
	    	\?)
   			echo "Invalid option: -$OPTARG" >&2
	   		;;
			esac
		shift
	done
set +x
}

#------------------------------------------------------------------------------
#GIT 
#------------------------------------------------------------------------------

gl() {
	git --no-pager log -n30 $@ --pretty="%h | %<(16)%cr | %<(20)%cn | %<(80,trunc)%s" --date=local\
 		| sed "s@\($(git config user.name)\|$USER\\|$MYENV_NAME\)@[0;32m\1[0m@g"
}

gsms() {
	echo "[0;1;36m>> Pulling repo[0m"
	git pull || return 1
	echo "[0;1;36m>> Syncing submodules[0m"
	git submodule sync --recursive || return  2
	echo "[0;1;36m>> Updating submodules[0m"
	git submodule update --init --recursive || return 3
}

gsmst() {
	echo ">> Status of head repo"
	git status -s
	echo ">> Status of submodules"
	git submodule foreach --recursive git status -s
}


