"#####################
"# VIM CONFIGURATION #
"#####################

" disable vi compatibility
"set nocp

" Pathogen
"so $GVIM_PATH/pathogen.vim
"execute pathogen#infect('$GVIM_PATH/bundle')

"-------------------------------------------------------------------------
" Vundle
"-------------------------------------------------------------------------
set nocompatible              " be iMproved, required
filetype off                  " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

Plugin 'AnsiEsc.vim'
Plugin 'DoxygenToolkit.vim'
Plugin 'ScrollColors'
Plugin 'jlanzarotta/bufexplorer'
Plugin 'gregsexton/gitv'
" highlights
" inkpot
Plugin 'fholgado/minibufexpl.vim'
Plugin 'yegappan/mru'
" mustang-vim
Plugin 'scrooloose/nerdtree'
Plugin 'tyru/open-browser.vim'
Plugin 'aklt/plantuml-syntax'
Plugin 'weirongxu/plantuml-previewer.vim'
Plugin 'ervandew/supertab'
Plugin 'scrooloose/syntastic'
Plugin 'godlygeek/tabular'
Plugin 'majutsushi/tagbar'
" unite.vim
Plugin 'vim-airline/vim-airline'
Plugin 'airblade/vim-gitgutter'
" vim-flatbuffers
Plugin 'tpope/vim-fugitive'
" vim-rtags
" vim-vitamins
Plugin 'YankRing.vim'
"Plugin 'valloric/youcompleteme'
"Plugin 'neoclide/coc.nvim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'embark-theme/vim'

call vundle#end()            " required
filetype plugin indent on    " required


"-------------------------------------------------------------------------
"Color and font
"-------------------------------------------------------------------------
colorscheme darkblue

set guifont=Monospace\ 10
set gfn=Monospace\ 10

" enable syntax highlighting
syntax on

if $TAGS_HL != ""
   au bufnewfile,bufread,FileChangedShellPost *.c,*.cc,*.h,*.cpp,*.hpp,*.patch  highlight link c_f Function
   au bufnewfile,bufread,FileChangedShellPost *.c,*.cc,*.h,*.cpp,*.hpp,*.patch  highlight c_t gui=bold,italic
   au bufnewfile,bufread,FileChangedShellPost *.c,*.cc,*.h,*.cpp,*.hpp,*.patch  highlight link c_d Tag
   au bufnewfile,bufread,FileChangedShellPost *.c,*.cc,*.h,*.cpp,*.hpp,*.patch  highlight link c_m Tag
   au bufnewfile,bufread,FileChangedShellPost *.c,*.cc,*.h,*.cpp,*.hpp,*.patch  highlight link c_e Tag
   au bufnewfile,bufread,FileChangedShellPost *.c,*.cc,*.h,*.cpp,*.hpp,*.patch  source $TAGS_HL
endif

"-------------------------------------------------------------------------
" Various
"-------------------------------------------------------------------------
	
" tabulation
set tabstop=4
set shiftwidth=4
set softtabstop=0

" un historique raisonnable
set history=100

" undo, pour revenir en arrière
set undolevels=300

" Quand un fichier est changé en dehors de Vim, il est relu automatiquement
"set autoread

" Ne pas nous afficher un message quand on enregistre un readonly
set writeany

" Afficher les commandes incomplètes
set showcmd

" Améliore l'affichage en disant à vim que nous utilisons un terminal rapide
set ttyfast

" When vimrc is edited, reload it
"autocmd! bufwritepost vimrc source $VIMRUNTIME/vimrc

" Automatically change the current directory
set autochdir

set path+=.
set path+=$PWD
set path+=$PWD/**

"Persistent undo
"set undodir=~/.vim/undodir
"set undofile

"#set shell=/bin/bash
set shell=/bin/zsh

" make backup files
set backup

" where to put backup files
set backupdir=~/.vim/backup

" share windows clipboard
set clipboard+=unnamed

" directory to place swap files in
"set directory=~/.vim/tmp

" support all three, in this order
set fileformats=unix,dos,mac

" use mouse everywhere
"set mouse=a

"Allow special Vim improvements like multiple-undo
set nocompatible

"Set improve Backspace
set bs=2

" visualbell
set visualbell

" don't make noise
"set noerrorbells

"Show the current edition mode on last line, number of column and line
set showmode
set ruler
set nu
set ls=2

"Mouse popup
set mousemodel=popup_setpos

" Set indentation corresponding to filetype
filetype indent on

" Make command line two lines high
"set ch=2

" Highlight search strings
set hlsearch

" "search as we type" on
set incsearch

" cindent option
set cinoptions=t0,(0,W4,l1,g0,hs

" I starts at the first non-blank character
set cpoptions+=H

" highlighting strings inside C comments
let c_comment_strings=1

" Backup dir
set aw

set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc

set listchars+=tab:\|-

set backupdir=~/tmp/vim/
set directory=~/tmp/vim/

" Do not save modified buffer when switching
set hidden

" Remove newline added by vim automatically at end-of-file
set noeol

" menubar
"set guioptions-=m

" tools bar
"set guioptions-=T

let g:yankring_history_dir = '~/tmp'


"---------------------------------------------------------------------------
" Mapping
"---------------------------------------------------------------------------
map <F2>          :call Show80col()<CR>
map <F4>          :TagbarToggle<CR>
map <F5>          ^i/* <C-[>$a */<C-[>
map <F6>          ^3x$2h3x
map <F7>          :bdelete<CR>
map <F9>          :noh<CR>
nmap <F10>        /[^\x00-\x7F]<CR>
map <C-N>         :noh<CR>
map <C-B>         :MRU<CR>
map <C-Del>       :bdelete<CR>
map <C-PageUp>    [c
map <C-PageDown>  ]c
map <C-x>         :call CloseSomething()<CR>
map <C-s>         :w!<CR>
map <C-s>         :w!<CR>
map <C-f>         :NERDTreeFind<CR>
map <C-z>         :FZF $VIMPROJSERVERNAME<CR>

map ,b            :!mk beautify-changes<CR><CR>
map ,l            :so ~/.vimrc<CR>
map ,#            :s/^/#/<CR><C-N>
map ,/            :s@^@//@<CR><C-N>
map ,"            :s@^@"@<CR><C-N>
map ,c            :set filetype=c<CR>
map ,z            :set filetype=zsh<CR>
map ,m            :set filetype=make<CR>
map ,p            :set filetype=python<CR>
map ,d            :Dox<CR><CR>
map ,i            :call ToggleExpandTab()<CR>
map ,n            :call ToggleListNoList()<CR>
nmap c            :cs find s <cword><CR>

vmap a "+y
vmap z "+p
nmap aa "+yy
nmap z "+p

" Sélectionner tout
map <C-a> ggVG

"tal : align "\" in multiple lines defines
vmap ,t !tal<CR>

map <C-g>         :vsp <CR>:exec("tag ".expand("<cword>"))<CR> 

"Completion in commands like 
cnoremap <Tab> <C-L><C-D>

" --------------------------------------------------------------------------
" Cscope 
"---------------------------------------------------------------------------
if has("cscope")
	" change this to 1 to search ctags DBs first
	set csto=0
	set cst
	set nocsverb
	" add any database in current directory
	if filereadable(".vimtags/cscope.out")
	    cs add .vimtags/cscope.out
	" else add database pointed to by environment
	elseif $CSCOPE_DB != ""
	    cs add $CSCOPE_DB
	endif
	set csverb

	" Using 'CTRL-AltGr \' then a search type makes the vim window
	" "shell-out", with search results displayed on the bottom

	nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
	nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

	" Using 'CTRL-AltGr ^' then a search type makes the vim window
	" split horizontally, with search result displayed in
	" the new window.

	nmap <C-^>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <C-^>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <C-^>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <C-^>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <C-^>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <C-^>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
	nmap <C-^>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <C-^>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>
endif

function! CloseSomething()
   if winnr("$") == 1 && tabpagenr("$") > 1 && tabpagenr() > 1 && tabpagenr() < tabpagenr("$")
      tabclose | tabprev
   else
      q
   endif
endfunction

" --------------------------------------------------------------------------
" Ctags
"---------------------------------------------------------------------------
if $VIMTAGSPATH != ""
   set tags+=$VIMTAGSPATH/tags
elseif filereadable(".vimtags/tags") 
   set tags+=.vimtags/tags
endif

"---------------------------------------------------------------------------
" SuperTab
" -------------------------------------------------------------------------
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabDefaultCompletionType = "<c-p>"
filetype plugin on
set omnifunc=syntaxcomplete#Complete
set complete=.,w,b,u,t

"---------------------------------------------------------------------------
" Mini buffer explorer plugin
" -------------------------------------------------------------------------
let g:miniBufExplMapWindowNavVim = 1 
let g:miniBufExplMapWindowNavArrows = 1 
let g:miniBufExplMapCTabSwitchBufs = 1 
let g:miniBufExplModSelTarget = 1

"---------------------------------------------------------------------------
" Syntastic!!
"---------------------------------------------------------------------------
let g:syntastic_enable_signs=1
let g:syntastic_auto_loclist=1
let g:syntastic_quiet_messages = {'level': 'warnings'}

"---------------------------------------------------------------------------
" NerdTree
"---------------------------------------------------------------------------
" Open it on vim startup
autocmd VimEnter * NERDTree
" Go to previous (last accessed) window.
autocmd VimEnter * wincmd p
" Mirror tree position for every buffer
autocmd BufEnter * NERDTreeMirror
" Set current dir to vim cwd
set autochdir
let NERDTreeChDirMode=2
" Ctrl+d to toggle NerdTree
nmap <silent> <C-D> :NERDTreeToggle<CR> 
" Close nerdtree when it's the only buffer left open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
set encoding=utf-8

"---------------------------------------------------------------------------
" Diff style
"---------------------------------------------------------------------------
if &diff
    au BufWritePost * diffupdate
endif

highlight DiffText guifg=black 

"---------------------------------------------------------------------------
"Toggle tab expansion
"---------------------------------------------------------------------------
set expandtab
let g:isexpandtab = 1
function! ToggleExpandTab()
   if g:isexpandtab == 0
      set expandtab
      echo "Tab will be expanded from now"
      let g:isexpandtab = 1
   else
      set noexpandtab
      echo "Tab will not be expanded anymore"
      let g:isexpandtab = 0
   endif
endfunction

"---------------------------------------------------------------------------
"Toggle list/nolist
"---------------------------------------------------------------------------
set nolist
let g:islist = 0
function! ToggleListNoList()
   if g:islist == 0
      set list
      echo "Print 'tab' and 'cr'"
      let g:islist = 1
   else
      set nolist
      echo "Unprint 'tab' and 'cr'"
      let g:islist = 0
   endif
endfunction

"---------------------------------------------------------------------------
"Highlight when line > 80 columns
"---------------------------------------------------------------------------
let g:isshow = 0
function! Show80col()
    if g:isshow == 0
      let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
      let g:isshow = 1
      echo 'Showing lines with more than 80 columns'
    else
      call matchdelete(w:m2)
      let g:isshow = 0
      echo 'Hiding lines with more than 80 columns'
    endif
endfunction

"---------------------------------------------------------------------------
"Highlight Patch like TODO :
au BufNewFile,BufRead *.c,*.h,*.cpp,*.patch 
         \ let g:m4=matchadd('Todo', '\c/\*.*PATCH.*', -1) |
 \ let g:m5=matchadd('Todo', '\c//.*PATCH.*', -1)  |
" \ set spell spelllang=en_us
 \ set nospell 

au BufNewFile,BufRead Makefile*,GNUmakefile*,*.mk,*.patch,*.mak,makefile*
 \ let g:m6=matchadd('Todo', '\c#.*PATCH.*', -1) |
" \ set spell spelllang=en_us
 \ set nospell 
 
"---------------------------------------------------------------------------
" Spelling
"---------------------------------------------------------------------------
au BufNewFile,BufRead *.c,*.h,*.cpp,*.patch 
 \ set spell spelllang=en_us

au BufNewFile,BufRead Makefile*,GNUmakefile*,*.mk,*.patch,*.mak 
 \ set spell spelllang=en_us

au BufNewFile,BufRead __Tag_List__
 \ set nospell 

map <silent> <F11> "<Esc>:silent setlocal spell! spelllang=en<CR>"
map <silent> <F12> "<Esc>:silent setlocal spell! spelllang=fr<CR>"

let g:netrw_altv = 1
let g:netrw_alto = 1

"---------------------------------------------------------------------------
" Doxygen syntax and toolkit
"---------------------------------------------------------------------------
let g:load_doxygen_syntax=1
let g:DoxygenToolkit_compactDoc="yes"
let g:DoxygenToolkit_blockHeader="--------------------------------------------------------------------------"
set formatoptions+=ro

"-------------------------------------------------------------------------
"SU write
"-------------------------------------------------------------------------
command! W w !sudo tee % > /dev/null

"---------------------------------------------------------------------------
" Myenv custo
"---------------------------------------------------------------------------
if filereadable($HOME . "/.myenv.extravim")
    so $HOME/.myenv.extravim
endif


""---------------------------------------------------------------------------
"" Coc
""---------------------------------------------------------------------------
"" Set internal encoding of vim, not needed on neovim, since coc.nvim using some
"" unicode characters in the file autoload/float.vim
"set encoding=utf-8

"" TextEdit might fail if hidden is not set.
"set hidden

"" Some servers have issues with backup files, see #649.
"set nobackup
"set nowritebackup

"" Give more space for displaying messages.
"set cmdheight=2

"" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
"" delays and poor user experience.
"set updatetime=300

"" Don't pass messages to |ins-completion-menu|.
"set shortmess+=c

"" Always show the signcolumn, otherwise it would shift the text each time
"" diagnostics appear/become resolved.
"if has("patch-8.1.1564")
  "" Recently vim can merge signcolumn and number column into one
  "set signcolumn=number
"else
  "set signcolumn=yes
"endif

"" Use tab for trigger completion with characters ahead and navigate.
"" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
"" other plugin before putting this into your config.
"inoremap <silent><expr> <TAB>
      "\ pumvisible() ? "\<C-n>" :
      "\ <SID>check_back_space() ? "\<TAB>" :
      "\ coc#refresh()
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

"function! s:check_back_space() abort
  "let col = col('.') - 1
  "return !col || getline('.')[col - 1]  =~# '\s'
"endfunction

"" Use <c-space> to trigger completion.
"if has('nvim')
  "inoremap <silent><expr> <c-space> coc#refresh()
"else
  "inoremap <silent><expr> <c-@> coc#refresh()
"endif

"" Make <CR> auto-select the first completion item and notify coc.nvim to
"" format on enter, <cr> could be remapped by other vim plugin
"inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              "\: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

"" Use `[g` and `]g` to navigate diagnostics
"" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
"nmap <silent> [g <Plug>(coc-diagnostic-prev)
"nmap <silent> ]g <Plug>(coc-diagnostic-next)

"" GoTo code navigation.
"nmap <silent> gd <Plug>(coc-definition)
"nmap <silent> gy <Plug>(coc-type-definition)
"nmap <silent> gi <Plug>(coc-implementation)
"nmap <silent> gr <Plug>(coc-references)

"" Use K to show documentation in preview window.
"nnoremap <silent> K :call <SID>show_documentation()<CR>

"function! s:show_documentation()
  "if (index(['vim','help'], &filetype) >= 0)
    "execute 'h '.expand('<cword>')
  "elseif (coc#rpc#ready())
    "call CocActionAsync('doHover')
  "else
    "execute '!' . &keywordprg . " " . expand('<cword>')
  "endif
"endfunction

"" Highlight the symbol and its references when holding the cursor.
"autocmd CursorHold * silent call CocActionAsync('highlight')

"" Symbol renaming.
"nmap <leader>rn <Plug>(coc-rename)

"" Formatting selected code.
"xmap <leader>f  <Plug>(coc-format-selected)
"nmap <leader>f  <Plug>(coc-format-selected)

"augroup mygroup
  "autocmd!
  "" Setup formatexpr specified filetype(s).
  "autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  "" Update signature help on jump placeholder.
  "autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
"augroup end

"" Applying codeAction to the selected region.
"" Example: `<leader>aap` for current paragraph
"xmap <leader>a  <Plug>(coc-codeaction-selected)
"nmap <leader>a  <Plug>(coc-codeaction-selected)

"" Remap keys for applying codeAction to the current buffer.
"nmap <leader>ac  <Plug>(coc-codeaction)
"" Apply AutoFix to problem on the current line.
"nmap <leader>qf  <Plug>(coc-fix-current)

"" Map function and class text objects
"" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
"xmap if <Plug>(coc-funcobj-i)
"omap if <Plug>(coc-funcobj-i)
"xmap af <Plug>(coc-funcobj-a)
"omap af <Plug>(coc-funcobj-a)
"xmap ic <Plug>(coc-classobj-i)
"omap ic <Plug>(coc-classobj-i)
"xmap ac <Plug>(coc-classobj-a)
"omap ac <Plug>(coc-classobj-a)

"" Remap <C-f> and <C-b> for scroll float windows/popups.
"if has('nvim-0.4.0') || has('patch-8.2.0750')
  "nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  "nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  "inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  "inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  "vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  "vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
"endif

"" Use CTRL-S for selections ranges.
"" Requires 'textDocument/selectionRange' support of language server.
"nmap <silent> <C-s> <Plug>(coc-range-select)
"xmap <silent> <C-s> <Plug>(coc-range-select)

"" Add `:Format` command to format current buffer.
"command! -nargs=0 Format :call CocAction('format')

"" Add `:Fold` command to fold current buffer.
"command! -nargs=? Fold :call     CocAction('fold', <f-args>)

"" Add `:OR` command for organize imports of the current buffer.
"command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

"" Add (Neo)Vim's native statusline support.
"" NOTE: Please see `:h coc-status` for integrations with external plugins that
"" provide custom statusline: lightline.vim, vim-airline.
"set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

"" Mappings for CoCList
"" Show all diagnostics.
"nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
"" Manage extensions.
"nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
"" Show commands.
"nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
"" Find symbol of current document.
"nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
"" Search workspace symbols.
"nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
"" Do default action for next item.
"nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
"" Do default action for previous item.
"nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
"" Resume latest coc list.
"nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
